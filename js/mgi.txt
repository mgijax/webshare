// mgi.txt
//

// note: this file cannot be used as is on any page as it contains config variables.
// these variables must have their values inserted before use.  this occurs as part 
// of the concatenation and minification of the js files.  

<!-- select current tab -->
function selectMinihomeTab(){
    var winLoc = new String(window.location);
    var winLocArray = winLoc.split("/");  
    var selectedPage = YAHOO.util.Dom.get(winLocArray[winLocArray.length -1]);
    YAHOO.util.Dom.addClass(selectedPage, 'selected');
}

YAHOO.util.Event.onDOMReady(selectMinihomeTab);

<!-- function kicks off on page load -->
function loadPage() {  
  // if we have a title bar, add help-linked logo if requested
  var titleBarWrapper = document.getElementById("titleBarWrapper");
  if (titleBarWrapper != null) {
      var currentHTML = titleBarWrapper.innerHTML;
      var helpIcon = '<img class="titleBarHelpIcon" src="${WEBSHARE_URL}images/help_large_transp.gif">';
      var userdoc = titleBarWrapper.getAttribute("userdoc");
      if (userdoc != null) {

        var helpLink = '';

        userdocArray = userdoc.split("/");
        if (userdocArray[0] == 'http:') { //passed a full URL
          helpLink = "<a href='" + userdoc + "'>" + helpIcon + "</a>";
        }
        else {
          helpLink = "<a href='${USERHELP_URL}" + userdoc + "' onclick='javascript:openUserhelpWindow(\"" + userdoc + "\"); return false;'>" + helpIcon + "</a>";
        }

        titleBarWrapper.innerHTML = helpLink + currentHTML;
      }
  } else {
      // special handling for GXD pages

      titleBarWrapper = document.getElementById("titleBarWrapperGxd");
      var helpIcon = '<img class="titleBarHelpIconGxd" src="${WEBSHARE_URL}images/help_large_transp.gif">';
      var userdoc = titleBarWrapper.getAttribute("userdoc");
      if (userdoc != null) {
	 var helpLink = '';
	 userdocArray = userdoc.split("/");

	 if (userdocArray[0] == 'http:') { //passed a full URL
              helpLink = "<a href='" + userdoc + "'>" + helpIcon + "</a>";
         } else {
              helpLink = "<a href='${USERHELP_URL}" + userdoc + "' onclick='javascript:openUserhelpWindow(\"" + userdoc + "\"); return false;'>" + helpIcon + "</a>";
         }

         // For GXD pages, if there is a headerRightGxd div, then we want to
	 // put the help icon there.  If there is not one, then we add it to
	 // the titleBarWrapperGxd div. 
	 
	 var wrapper = document.getElementById("headerRightGxd");
	 if (wrapper == null) {
	   wrapper = document.getElementById("titleBarWrapperGxd");
	 }

	 if (wrapper != null) {
	    var currentHTML = wrapper.innerHTML; 
            wrapper.innerHTML = currentHTML + helpLink;
         }
      }
  }
};

YAHOO.util.Event.onDOMReady(loadPage);


<!-- faq window to assist user; callable from anywhere using the templates -->
function openFaqWindow(faqFile)
{
    faqUrl = "${FAQ_URL}" + faqFile;
    window.open(faqUrl,'faqWindow','width=1000,height=600,resizable=yes,scrollbars=yes,alwaysRaised=yes');
};

<!-- faq window to assist user; callable from anywhere using the templates -->
function openUserhelpWindow(helpFile)
{
    helpUrl = "${USERHELP_URL}" + helpFile;
    window.open(helpUrl,'helpWindow','width=1000,height=600,resizable=yes,scrollbars=yes,alwaysRaised=yes');
};

<!-- initialize navigation menu -->
YAHOO.namespace("mgi.navbar");
YAHOO.mgi.navbar.menuinit = function() {
    var menu = new YAHOO.widget.MenuBar("navBarMenu", {
            constraintoviewport: false,
            autosubmenudisplay: true,
            showdelay: 250,
            hidedelay: 950,
            lazyload: true,
            iframe:true
        });
    menu.render();
    menu.cfg.setProperty("constraintoviewport", false);
};

YAHOO.util.Event.onDOMReady(YAHOO.mgi.navbar.menuinit);


function openNewWindow(url)
{
    window.open(url,'new','width=1000,height=600,resizable=yes,scrollbars=yes,menubar=yes,toolbar=yes,alwaysRaised=yes');
};

function openNewWindowNoMenu(url)
{
    window.open(url,'new','width=1000,height=600,resizable=yes,scrollbars=yes,alwaysRaised=yes');
};

function verifySearchToolParms() {
  var blankRE=/^\s*$/;
  var searchToolTextArea = document.getElementById("searchToolTextArea");

  if (searchToolTextArea.value == " Keywords, Symbols, or IDs" || blankRE.test(searchToolTextArea.value)) {
    alert("Please enter an ID or symbol or name into the text box.");
    return false;
  }

  return true
}

/* requests the page at the given 'url' from the server, passes along the
 * given arguments as 'args', and ignores the response
 */
function hitUrl (url, args) {
  try {
    var myRequest = new ajaxObject (url);
    myRequest.update (args);
  } catch (err) {
    // ignore errors, as this is not mission-critical code
  }
  return;
}

/*--------------------------------------------------------------------------*/

/* function ajaxObject() for asynchronous loading of URLs taken from:
 *	http://www.hunlock.com/blogs/The_Ultimate_Ajax_Object
 * callbackFunction is optional;  returns a javascript object
 */
function ajaxObject(url, callbackFunction) {
  var that=this;      
  this.updating = false;
  this.abort = function() {
    if (that.updating) {
      that.updating=false;
      that.AJAX.abort();
      that.AJAX=null;
    }
  }
  this.update = function(passData,postMethod) { 
    if (that.updating) { return false; }
    that.AJAX = null;                          
    if (window.XMLHttpRequest) {              
      that.AJAX=new XMLHttpRequest();              
    } else {                                  
      that.AJAX=new ActiveXObject("Microsoft.XMLHTTP");
    }                                             
    if (that.AJAX==null) {                             
      return false;                               
    } else {
      that.AJAX.onreadystatechange = function() {  
        if (that.AJAX.readyState==4) {             
          that.updating=false;                
          that.callback(that.AJAX.responseText,that.AJAX.status,that.AJAX.responseXML);        
          that.AJAX=null;                                         
        }                                                      
      }                                                        
      that.updating = new Date();                              
      if (/post/i.test(postMethod)) {
        var uri=urlCall+'?'+that.updating.getTime();
        that.AJAX.open("POST", uri, true);
        that.AJAX.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        that.AJAX.setRequestHeader("Content-Length", passData.length);
        that.AJAX.send(passData);
      } else {
        var uri=urlCall+'?'+passData+'&timestamp='+(that.updating.getTime()); 
        that.AJAX.open("GET", uri, true);                             
        that.AJAX.send(null);                                         
      }              
      return true;                                             
    }                                                                           
  }
  var urlCall = url;        
  this.callback = callbackFunction || function () { };
}

/*--------------------------------------------------------------------------*/

function changeVisibility(id) {

    if (YAHOO.util.Dom.getStyle(id, 'display') == 'none'){
        YAHOO.util.Dom.setStyle(id, 'display', 'block');
    } else {
        YAHOO.util.Dom.setStyle(id, 'display', 'none');
    }
}

function changeInline(id) {

    var myID = document.getElementById(id);

    if (myID.style.display == "inline"){
        myID.style.display = "none";
    } else {
        myID.style.display = "inline";
    }
}

function formCap(){
    var c;
    if ( document.getElementById("${CAPTCHA_ELEMENT}") ){
        c = document.getElementById("${CAPTCHA_ELEMENT}");
        if ( isNaN(c.value) == true ) {
            c.value = 0;
        } else {
            c.value = parseInt(c.value) + 1;
        }
        
    }
    setTimeout("formCap()", 1000);
}
formCap();

function setText(element, text){
	element.textContent=text;
    if (!YAHOO.lang.isUndefined(element.innerText)){                 
        element.innerText = text;

    }
};

/* This file takes a You Tube video ID from a link, calculates which row and cell 
the link is in, creates a div in the same cell in the previous row, and plays the 
specified video using the specified width and height. Tested in FF8, Chrome16, and 
IE8 on Windows7Pro.  KLF, JMason  2012-01-03 */
function play (yid, width, height, left, top){
	/* get the link which triggered this script, then get the cell (column) 
	and row and table it is in (because we still use tables for page layout) */
	
	var l = document.getElementById('YT')
	var c=l.parentNode.cellIndex;
	var r=l.parentNode.parentNode.rowIndex;
	var t=l.parentNode.parentNode.parentNode;
	/* create a div and put the You Tube player in it */
	var newdiv = document.createElement('div');
	if (width) { 
		newdiv.style.width = width; 
	} 
	if (height) { 
		newdiv.style.height = height;
	} 
	if ((left || top) || (left && top)) { 
		newdiv.style.position = "absolute"; 
		if (left) { 
		    newdiv.style.left = left; 
		} 
		if (top){ 
		    newdiv.style.top = top; 
		} 
	} 
	newdiv.innerHTML = '<iframe width="'+width+'" height="'+height+'" src="http://www.youtube.com/v/'+yid+'&autoplay=1&autohide=1&loop=1&playlist='+yid+'&rel=0" frameborder="0" allowfullscreen></iframe>'; 
	/*  You Tube link parameters: 
		&autoplay=1   set to play the video as soon as it loads
		&autohide=1   hides the player controls until user mouses over the video
		&loop=1&playlist='+yid+'   sets the video to play continuous loop, 
			must specify video ID again as its own playlist
		&rel=0   hides any "related videos" that You Tube might promote
		frameborder="0" allowfullscreen    these are usually included in 
			examples though they don't do anything for us here
	*/
	/* put the new div containing the You Tube player and video into the table 
	in the row above the triggering link, but in the same column */
	t.rows[r-1].cells[c].innerHTML=newdiv.innerHTML;
}

/*--------------------------------------------------------------------------*/
// Special helper class for dealing with dynamic content
// simply call MGIAjax.loadContent("http://whatever.com/content","css_id_of_div")
// assumes you also have an element of id format "css_id_of_div_loading" for displaying the loading text or gif
// author: kstone
var MGIAjax = {
        // Global config variables that can be modified if needed
        // number of times to retry a failed ajax call
        TIMES_TO_RETRY:5,
        // time between retries
        RETRY_TIMEOUT:2000,// 2 seconds
        AJAX_TIMEOUT:90000, // 90 seconds. If users get this error a lot, we should probably up this.

        RETRY_MESSAGE:"<span>Failed to retrieve content. Retrying...</span>",
        GENERIC_ERROR_MESSAGE:"<span style=\"color:red;\">Error retrieving content.</span> "+
                "<a href=\"http://www.informatics.jax.org/mgihome/support/mgi_inbox.shtml\">Please contact user support.</a>",
        TIMEOUT_ERROR_MESSAGE:"<span style=\"color:red;\">Error request timed out.</span> "+
                "<a href=\"http://www.informatics.jax.org/mgihome/support/mgi_inbox.shtml\">Please contact user support.</a>",
        // Variable to track status of multiple ajax calls when errors occur
        RETRY_TRACKER : {},
        handleAjaxError : function(textStatus,contentID,loadingID,loadFunction)
        {
                // retry until the retry limit... unles we have a timeout error
                if(MGIAjax.RETRY_TRACKER[contentID] < MGIAjax.TIMES_TO_RETRY && textStatus!="timeout")
                {
                        MGIAjax.RETRY_TRACKER[contentID]+=1;
                        // set the error indicating we are attempting to retry the ajax call.
                        if(MGIAjax.RETRY_TRACKER[contentID]==1) $(contentID).append(MGIAjax.RETRY_MESSAGE);
                        setTimeout(loadFunction,MGIAjax.RETRY_TIMEOUT);
                }
                else
                {
                        $(loadingID).hide();
                        if(textStatus=="timeout"){ $(contentID).html(MGIAjax.TIMEOUT_ERROR_MESSAGE); }
                        else{ $(contentID).html(MGIAjax.GENERIC_ERROR_MESSAGE); }
                }
        },
        // to load ajax content, simply provide the url and the id of the container we want the content loaded into

        // the div of the loading gif must be of format "contentID_loading"
        // for multiple uses of this function, be sure to use unique contentIDs
        loadContent : function(url,contentID,usePost,postData)
        {
                var contentID = "#"+contentID;
                var loadingID = contentID+"_loading";
                if(usePost==undefined) usePost = false;

                // use contentID as key for error handling
                MGIAjax.RETRY_TRACKER[contentID] = 0;

                // define the load function
                var loadJson = function ()
                {
                	
                	if(!usePost)
                	{
	                	$.get(url, ajaxResponse)
	                		.error(ajaxError);
                	}
                	else
                	{
                		$.post(url, postData, ajaxResponse)
                			.error(ajaxError);
                	}
                }

                // define the success and error handling functions

                //Ajax Success function
                var ajaxResponse = function(data)
                {
                        $(contentID).html(data);
                        $(loadingID).hide();
                }

                //Ajax Error function
                var ajaxError = function(jqXHR, textStatus, errorThrown)
                {
                        MGIAjax.handleAjaxError(textStatus,contentID,loadingID,loadJson);
                }

                // set cross origin support
                $.support.cors = true;
                // set the ajax timeout
                $.ajaxSetup({ timeout: MGIAjax.AJAX_TIMEOUT });
                // kick off the ajax call
                loadJson();
        },
        // convenience method
        postLoadContent : function(url,contentID,postData)
        {
        	MGIAjax.loadContent(url,contentID,true,postData);
        }
};
/*--------------------------------------------------------------------------*/
